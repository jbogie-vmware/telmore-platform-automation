---
platform: linux

inputs:
- name: config # contains product and stemcell config files
- name: secrets
- name: pivnet-cli
- name: jq

params:
  VARS_FILES:
  # - Optional
  # - Filepath to the Ops Manager vars yaml file
  # - The path is relative to root of the task build,
  #   so `vars` and `secrets` can be used.
  
  CONFIG_FILES_PATH:
  # - List of all the product and stemcell configuration yaml files
  # - The path is relative to the root of the 'config' input

  IAAS_SECRETS_PATH:
  # - Path to the azure secrets

  PIVNET_SECRETS_PATH:
  # - Path to the pivnet secrets

  IAAS:
  # - The destination iaas to copy the files (source is always pivnet)

run:
  path: bash
  args:
  - "-c"
  - |
    cat /var/version && echo ""
    # set -eux

    function get-azure-file {
      export azure_account_name="$(om interpolate -s --config config/${product} --path /azure-storage-account | head -n1)"
      export azure_container="$(om interpolate -s --config config/${product} --path /blobstore-bucket | head -n1)"

      export azure_account_key="$(om interpolate -s --config secrets/${IAAS_SECRETS_PATH} --path /azure-storage-key | head -n1)"

      export blobfile="$(az storage blob list \
                          --account-name ${azure_account_name} \
                          --account-key ${azure_account_key} \
                          -c ${azure_container} \
                          | $JQ_CMD '.[] | select(.name | test("'${product_name}','${patch_version}'")) | .name' -r)"
    }

    function put-azure-file {
      az storage blob upload \
        --account-name ${azure_account_name} \
        --account-key ${azure_account_key} \
        -c ${azure_container} \
        -f ${full_filename} \
        -n ${filename}
    }

    function get-gcp-file {
      echo "Function not implemented"
    }

    function put-gcp-file {
      echo "Function not implemented"
    }

    function get-aws-file {
      echo "Function not implemented"
    }

    function put-aws-file {
      echo "Function not implemented"
    }
        
    function process-product {

      product=$1

      echo Processing ${product}

      product_version_family="$(om interpolate -s --config config/${product} --path /product-version | head -n1)"
      product_name="$(om interpolate -s --config config/${product} --path /pivnet-product-slug | head -n1)"
      product_glob="$(om interpolate -s --config config/${product} --path /pivnet-file-glob | head -n1)"
      PIVNET_TOKEN="$(om interpolate -s --config secrets/${PIVNET_SECRETS_PATH} --path /pivnet-api-token | head -n1)"

      $PIVNET_CLI login --api-token=$PIVNET_TOKEN  

      patch_version="$( $PIVNET_CLI releases -p ${product_name} --format json | $JQ_CMD '[.[] | select(.availability=="All Users") | select(.version | test("'${product_version_family}'"))] [0].version ' -r )"

      get-${IAAS}-file

      if [ -z "$blobfile" ]; then
        echo "The product file for ${product_name} version ${patch_version} is not found.  Downloading product now"

        vars_files_args=("")
        for vf in ${VARS_FILES}
        do
          vars_files_args+=("--vars-file ${vf}")
        done

        tmpdir=$(mktemp -d)
        om download-product --config config/${product} \
          --product-version ${patch_version} \
          --output-directory ${tmpdir} \
          ${vars_files_args[@]}

        full_filename=$(ls ${tmpdir}/\[*\]${product_glob})
        filename=$(basename $full_filename)

        put-${IAAS}-file
        
        rm -r ${tmpdir}

      else
        echo "The product file for ${product_name} version ${patch_version} is already in azure blob store... skipping."
      fi
    }

    PIVNET_CLI=`find ./pivnet-cli -name "*linux-amd64*"`
    chmod +x $PIVNET_CLI

    chmod +x ./jq/jq-linux64
    JQ_CMD=./jq/jq-linux64

    echo "Starting loop thru products"
    echo ${CONFIG_FILES_PATH}
    pwd
    ls ${CONFIG_FILES_PATH}
    CONFIG_FILES=$(find $CONFIG_FILES_PATH -type f -name '*.yml' -follow)
    # CONFIG_FILES=$(cd files && find $CONFIG_FILES_PATH -type f -name '*.yml' -follow)
    echo ${CONFIG_FILES}
    for config_file in ${CONFIG_FILES}
    do
      process-product ${config_file}
    done
